// Declare the module for 'smart-widget-handler'
declare module 'smart-widget-handler' {
    // Define the context type for host.sendContext
    interface UserContext {
      pubkey: string;
      display_name?: string;
      name?: string;
      picture?: string;
      banner?: string;
      nip05?: string;
      lud16?: string;
      lud06?: string;
      website?: string;
    }
  
    // Define the Nostr event type for sendEvent and request methods
    interface NostrEvent {
      pubkey?: string;
      id?: string;
      content: string; // Can be empty string, so not optional
      created_at?: number;
      tags: string[][]; // Array of tag arrays
      sig?: string;
      kind: number;
    }
  
    // Payment context for sendPaymentResponse
    interface PaymentResponseContext {
      status: true | false;
      preImage?: string;
    }

    // Payment context for requestPayment
    interface PaymentRequestContext {
      address: string; // Lightning address, LNURL, or BOLT11 invoice
      amount?: number; // Sats, required unless BOLT11
      nostrPubkey?: string;
      nostrEventIDEncode?: string;
    }

    // Define the message data structure for window.postMessage
    interface MessageData<T = any> {
      data: T;
      scope: 'sw-data';
      kind: 'user-metadata' | 'nostr-event' | 'err-msg' | 'app-loaded' | 'sign-event' | 'sign-publish' | 'custom-data';
    }
  
    // Define the return type for the listen methods
    interface ListenerHandle {
      close: () => void;
    }
  
    // Host interface
    interface Host {
      /**
       * Sends a payment response to the target iframe.
       * @param context The payment response payload: { status: true | false , preImage?: string }
       * @param origin The target URL where the message will be sent. Must start with "http://" or "https://".
       * @param iframe The target iframe element that will receive the message.
       */
      sendPaymentResponse(context: PaymentResponseContext, origin: string, iframe: HTMLIFrameElement): void;
      /**
       * Listen for messages from the iframe, excluding user-metadata, nostr-event, and err-msg kinds
       * @param cb A callback function to listen for messages, receiving the parsed message data
       * @returns An object with a close method to stop listening for messages
       */
      listen(cb: (data: MessageData) => void): ListenerHandle;
  
      /**
       * Send the connected Nostr account to the iframe
       * @param context The connected Nostr account { pubkey, display_name, name, picture, banner, nip05, lud16, lud06, website }
       * @param host_origin The origin of the host app (defaults to "*")
       * @param origin The URL in which the message is going to
       * @param iframe The target iframe element
       */
      sendContext(context: UserContext, host_origin: string, origin: string, iframe: HTMLIFrameElement): void;
  
      /**
       * Send a signed and/or published Nostr event to the iframe
       * @param context A valid Nostr event
       * @param status The status of the operation (success | error)
       * @param origin The URL in which the message is going to
       * @param iframe The target iframe element
       */
      sendEvent(context: NostrEvent, status: 'success' | 'error', origin: string, iframe: HTMLIFrameElement): void;
  
      /**
       * Send an error message to the iframe
       * @param errMessage Error message
       * @param origin The URL in which the message is going to
       * @param iframe The target iframe element
       */
      sendError(errMessage: string, origin: string, iframe: HTMLIFrameElement): void;
    }
  
    // Client interface
    interface Client {
      /**
       * Request a payment from the connected user on the parent side.
       * @param context An object containing the payment details: { address: string, amount?: number, nostrPubkey?: string, nostrEventIDEncode?: string }
       * @param origin The target URL where the message will be sent.
       */
      requestPayment(context: PaymentRequestContext, origin: string): void;
      /**
       * Notify the parent app that the child app is loaded and ready to communicate with
       * @param parentOrigin The origin of the parent app (defaults to window.location.ancestorOrigins[0])
       */
      ready(parentOrigin?: string): void;
  
      /**
       * Listen for messages from the parent, excluding app-loaded, sign-event, sign-publish, and custom-data kinds
       * @param cb A callback function to listen for messages, receiving the parsed message data
       * @returns An object with a close method to stop listening for messages
       */
      listen(cb: (data: MessageData) => void): ListenerHandle;
  
      /**
       * Request the parent to sign a Nostr event on its behalf
       * @param context An object with the initial values of a Nostr event {content, tags, kind}
       * @param origin The URL in which the message is going to
       */
      requestEventSign(context: Pick<NostrEvent, 'content' | 'tags' | 'kind'>, origin: string): void;
  
      /**
       * Request the parent to sign and publish a Nostr event on its behalf
       * @param context An object with the initial values of a Nostr event {content, tags, kind}
       * @param origin The URL in which the message is going to
       */
      requestEventPublish(context: Pick<NostrEvent, 'content' | 'tags' | 'kind'>, origin: string): void;
  
      /**
       * Send custom data to the parent app
       * @param context A string containing custom data
       * @param origin The URL in which the message is going to
       */
      sendContext(context: string, origin: string): void;
    }
  
    // SWHandler interface
    interface SWHandler {
      host: Host;
      client: Client;
    }
  
    // Declare the default export
    const swHandler: SWHandler;
    export default swHandler;
  }